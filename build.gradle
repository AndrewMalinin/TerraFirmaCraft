import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id("java")
    id("idea")
    id("org.cadixdev.licenser") version "0.6.1"
    id("com.matthewprenger.cursegradle") version "1.4.0"
    id("net.minecraftforge.gradle") version "5.1.+"
    id("org.parchmentmc.librarian.forgegradle") version "1.+"
    id("org.spongepowered.mixin") version "0.7.+"
}

new File('./dev.gradle').createNewFile()
apply from: 'dev.gradle'

// These properties can all be customized from dev.gradle
String mappingsChannel = project.findProperty("mappings_channel") ?: "official"
String mappingsVersion = project.findProperty("mappings_version") ?: minecraft_version
boolean minifyResources = project.findProperty("minify_resources") ?: true
boolean advancedClassRedef = project.findProperty("use_advanced_class_redefinition") ?: false

println "Using mappings: ${mappingsChannel} / ${mappingsVersion}"

group = "net.dries007.tfc" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TerraFirmaCraft-Forge-${minecraft_version}"

// Use version from environment variable, if set
version = System.getenv("VERSION") ?: "0.0.0-indev"
java.toolchain.languageVersion = JavaLanguageVersion.of(17)


repositories {
    mavenCentral()
    mavenLocal()
    maven {
        // JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // Mirror for JEI
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // Cyanide
        name = "AlcatrazEscapee"
        url = "https://alcatrazescapee.jfrog.io/artifactory/mods"
    }
    maven {
        // Patchouli
        name = "BlameJared"
        url = "https://maven.blamejared.com"
    }
    maven {
        // Jade
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    flatDir {
        dirs "libs"
    }
}

minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        all {
            args("-mixin.config=${mod_id}.mixins.json")

            property("forge.logging.console.level", "debug")
            property("forge.enabledGameTestNamespaces", mod_id)

            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")

            jvmArgs("-ea", "-Xmx4G", "-Xms4G")

            if (advancedClassRedef) {
                jvmArg('-XX:+AllowEnhancedClassRedefinition')
            }

            ideaModule("${project.getName()}.test")

            mods {
                tfc {
                    sources(sourceSets.main, sourceSets.test)
                }
            }
        }

        client {
            workingDirectory(project.file("run/client"))
        }

        server {
            workingDirectory(project.file("run/server"))

            arg("--nogui")
        }

        gameTestServer {
            workingDirectory(project.file("run/gametest"))

            arg("--nogui")
            forceExit(false)
        }
    }
}

dependencies {
    minecraft("net.minecraftforge:forge:${minecraft_version}-${forge_version}")

    // runtimeOnly(fg.deobf("com.alcatrazescapee:cyanide-forge-1.18.2:2.1.0")) { transitive = false }
    // runtimeOnly(fg.deobf("libs:journeymap-1.17.1:5.7.3rc3")) // File: libs/journey,ap-1.17.1-5.7.3rc3.jar
    // runtimeOnly(fg.deobf("libs:panorama:1.2.0")) // File: libs/panorama-1.2.0.jar
    // runtimeOnly(fg.deobf("libs:ImmersiveEngineering-1.18.2:8.1.0-150")) // File: libs/ImmersiveEngineering-1.18.2-8.1.0-150.jar
    // runtimeOnly(fg.deobf("libs:FastWorkbench-1.18.2:6.1.0")) // File: libs/FastWorkbench-1.18.2-6.1.0.jar
    // runtimeOnly(fg.deobf("libs:Placebo-1.18.2:6.5.3")) // File: libs/Placebo-1.18.2-6.5.3.jar
    // runtimeOnly(fg.deobf("libs:rubidium:0.5.3a")) // File: libs/rubidium-0.5.3a.jar

    // JEI
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}"))

    // Patchouli
    // We need to compile against the full JAR, not just the API, because we do some egregious hacks.
    compileOnly(fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}"))
    runtimeOnly(fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}"))

    // Jade
    compileOnly(fg.deobf("curse.maven:jade-324717:${jade_version}"))
    runtimeOnly(fg.deobf("curse.maven:jade-324717:${jade_version}"))
    compileOnly(fg.deobf("curse.maven:top-245211:${top_version}"))
    //runtimeOnly(fg.deobf("curse.maven:top-245211:${top_version}"))

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")
    }

    minecraftLibrary("org.junit.jupiter:junit-jupiter-api:5.9.0")
    minecraftLibrary("org.junit.jupiter:junit-jupiter-engine:5.9.0")
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

processResources {

    filesMatching("**/book.json") {
        expand "version": project.version
    }

    if (minifyResources) {
        doLast {
            def jsonMinifyStart = System.currentTimeMillis()
            def jsonMinified = 0
            def jsonBytesBefore = 0, jsonBytesAfter = 0
            fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
                jsonMinified++
                jsonBytesBefore += file.length()
                try {
                    file.text = JsonOutput.toJson(new JsonSlurper().parse(file)).replace('"__comment__":"This file was automatically created by mcresources",', '')
                } catch (Exception e) {
                    println("Parsing JSON error in ${file.path}")
                    throw e
                }
                jsonBytesAfter += file.length()
            }
            println("Minified ${jsonMinified} json files. Reduced ${jsonBytesBefore / 1024} kB to ${(jsonBytesAfter / 1024)} kB. Took ${System.currentTimeMillis() - jsonMinifyStart} ms")
        }
    }
}

idea {
    module {
        excludeDirs.add(file("run"))
    }
}


// Automatically apply a license header when running checkLicense / updateLicense
license {
    header = project.file('HEADER.txt')

    include "**/*.java"
    exclude "net/dries007/tfc/world/noise/FastNoiseLite.java" // Fast Noise
}


// Puts the mod version into the jar for mods.toml to read from
jar {
    manifest {
        attributes ([
                "Implementation-Version": "${project.version}",
                "MixinConfigs"          : "${mod_id}.mixins.json"
        ])
    }
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")
    add(sourceSets.test, "${mod_id}.refmap.json")
}

curseforge {
    apiKey = System.getenv("CURSEFORGE_API_KEY") ?: "nope"

    project {
        id = "302973"
        changelog = "[Changelog ${version}](https://github.com/TerraFirmaCraft/TerraFirmaCraft/releases/tag/v${project.version})"
        changelogType = "markdown"

        releaseType = project.version.contains("beta") ? "beta" : (project.version.contains("alpha") ? "alpha" : "release")
        addGameVersion("${minecraft_version}")

        mainArtifact jar

        relations {
            requiredDependency("patchouli")
            optionalDependency("jei")
        }
    }
}
